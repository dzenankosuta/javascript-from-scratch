Da, naravno! Evo jednog jednostavnog primera kako koristiti getter i setter metode u klasi u JavaScriptu:

javascript

class Osoba {
  constructor(ime, prezime) {
    this._ime = ime;
    this._prezime = prezime;
  }

  get ime() {
    return this._ime;
  }

  set ime(novoIme) {
    this._ime = novoIme;
  }

  get prezime() {
    return this._prezime;
  }

  set prezime(novoPrezime) {
    this._prezime = novoPrezime;
  }
}

let osoba = new Osoba('Marko', 'Markovic');

console.log(osoba.ime); // 'Marko'
console.log(osoba.prezime); // 'Markovic'

osoba.ime = 'Petar';
osoba.prezime = 'Petrovic';

console.log(osoba.ime); // 'Petar'
console.log(osoba.prezime); // 'Petrovic'

U ovom primeru, klasa Osoba ima dve osobine _ime i _prezime. 
Međutim, primetite da smo za njihove javne verzije koristili getter i setter metode. 
Getter metoda se koristi da se dobije vrednost osobine, a setter metoda da bi se postavila nova vrednost osobine.

Kada instanciramo objekat osoba, primetite da smo mu postavili vrednosti za _ime i _prezime, a ne za ime i prezime. 
To je zato što su _ime i _prezime namenjeni da budu privatne osobine klase Osoba.

Kada pozovemo console.log(osoba.ime), getter metoda se poziva i vraća vrednost _ime, što je 'Marko'. 
Kada pozovemo osoba.ime = 'Petar', setter metoda se poziva i postavlja vrednost _ime na 'Petar'.

Koristeći getter i setter metode, možete zaštititi privatne osobine klase od spoljnih uticaja 
i pružiti dodatnu kontrolu nad tim kako se javne verzije osobina mogu dobiti i postaviti. 
Korišćenjem ovih metoda možete implementirati dodatne provere i validacije pri postavljanju vrednosti osobina.

